name: DevSecOpsTask1

#Trigger workflow on pull requests and push
on:
  pull_request:
  push:
    branches:
      - main
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest
        
    steps:
      
      - run: echo "The job was automatically triggered by a ${{ github.event_name }} event."

      - name: Checkout code
        uses: actions/checkout@v4
      - run: echo "The ${{ github.repository }} repository has been cloned to the runner."

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          # Caching packages dependencies
          cache: 'pip'
          cache-dependency-path: '**/requirements*.txt'
      - run: echo "Python has been set up."

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt && pip install -r requirements-dev.txt
      - run: echo "Dependencies have been installed."

      - name: Run tests with pytest
        # Using all available CPU-cores with -n auto
        # Measure code coverage during the test with --cov
        run: pytest -n auto --cov=note_api tests/

      # New

      - name: Upload coverage to Codecov
      # Use Codecov Action to upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml  # Referencing the coverage XML file
          flags: unittests
          name: code-coverage
      - run: echo "Coverage report has been uploaded to Codecov."

      - name: Run security scan with Snyk
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }} # Make sure to add your Snyk API token in the GitHub Secrets
      - run: echo "Security scan has been completed."

      - name: Build and push Docker image
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}
          TAG: ${{ github.sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker build -t $REGISTRY/$IMAGE_NAME:$TAG .
          echo $GITHUB_TOKEN | docker login $REGISTRY -u ${{ github.actor }} --password-stdin
          docker push $REGISTRY/$IMAGE_NAME:$TAG
      - run: echo "Docker image has been pushed to GitHub Container Registry."

      # Old
      
      - run: echo "Pytest has been executed. Job status is ${{ job.status }}."
